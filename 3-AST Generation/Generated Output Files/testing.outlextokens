[blockcmt, /*classQUADRATICisaPOLYNOMIAL,CUBIC,SOMETHING{functionprintArray:(arr:integer[2],size:float[6][4][1],hello:id)=>void;constructortest:(hello:float);privateattributea:float;privateattributearr:integer[2];};*/, 7]
[class, class, 9]
[id, QUADRATIC, 9]
[lcurbr, {, 9]
[private, private, 10]
[attribute, attribute, 10]
[id, a, 10]
[colon, :, 10]
[float, float, 10]
[lsqbr, [, 10]
[intlit, 3, 10]
[rsqbr, ], 10]
[semi, ;, 10]
[rcurbr, }, 11]
[semi, ;, 11]
[function, function, 13]
[id, printArray, 13]
[lpar, (, 13]
[id, arr, 13]
[colon, :, 13]
[integer, integer, 13]
[lsqbr, [, 13]
[intlit, 2, 13]
[rsqbr, ], 13]
[comma, ,, 13]
[id, size, 13]
[colon, :, 13]
[float, float, 13]
[lsqbr, [, 13]
[intlit, 6, 13]
[rsqbr, ], 13]
[lsqbr, [, 13]
[intlit, 4, 13]
[rsqbr, ], 13]
[lsqbr, [, 13]
[intlit, 1, 13]
[rsqbr, ], 13]
[comma, ,, 13]
[id, hello, 13]
[colon, :, 13]
[id, id, 13]
[rpar, ), 13]
[arrow, =>, 13]
[void, void, 13]
[lcurbr, {, 14]
[inlinecmt, //hello(0).yo=yo(5*6).hello.no(2<5+3)*2;, 15]
[inlinecmt, //write(2<=var[3].cool(2).sup*7);, 16]
[id, hello, 17]
[lpar, (, 17]
[rpar, ), 17]
[semi, ;, 17]
[id, yo, 18]
[equal, =, 18]
[intlit, 2, 18]
[semi, ;, 18]
[rcurbr, }, 19]
[blockcmt, /*functionprintArray::evaluate(arr:integer[2],size:float[6][4][1],hello:id)=>void{}functionprintArray::constructor(arr:integer[2],size:float[6][4][1],hello:id)*/, 28]
