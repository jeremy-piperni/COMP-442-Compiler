function functionBody(arr: integer[][], size: integer) => void 
{
  localvar n: integer;
  n = size;
  localvar i: integer; 
  i = 0; 
  while (i<n) { 
    write(arr[i]);
    i = i+1;
  };
  
    while (i<n) { 
      write(arr[i]);
    };
  
    while (i<n) { };

    if (arr[j] > arr[j+1]) 
      then {
        temp = arr[j];
      } else ;
      
 if (arr[j] > arr[j+1]) 
   then {
   } else {
        temp = arr[j];
   };
} 

function variableIdNest(arr: integer[], size: integer) => void 
{ 
  localvar n: integer;
  n = n;
  n = n.n;
  n = n.n();
  n = n.n(1.0);
  n = n.n(n);
  n = n(n).n;
  n = n(n).n();
  n = n(n).n(1.0);
  n = n.n[n];
  n = n.n[1*9];
  n = n[n].n;
  n = n[n].n[n];
  n = n.n[n][n];
  n = n[n][n].n;
  n = n[n][n].n[n][n];
  n = n(n).n[n];
  n = n(n).n[n][n];
  n = n(n).n[n].n();
  n = n[n][n].n().n;
  
  n = n[a][b][10 / 9 ][c];
} 

function expressionsTest() => void 
{
  localvar n: integer;
  localvar i: integer;
  
  n = i;
  n = n + 1;
  n = n - 1;
  n = n * 10;
  n = n / 10;
  n = n > 5;
  n = n < 5;
  n = n >= 5;
  n = n <= 5;
  n = n <> 5;
  n = n + 5 * 10;
  n = n - 5 * 10;
  n = n * 10 / 5;
  n = n * 6 / 44 > 9;
  n = n * 6 / 44 > i;
  n = (n+10) * 8;
  n = (n + (8 * i) / 9);
  n = -n;
  n = -19 + -n;
  n = 1 - -n;
  n = 1 - --n;
  n = 17 * -n;
  n = 10.99 * 0.99 + i;
  n = not 8 > i;
  n = 7 > 0 and i;
  n = 7 > 0 or i;
  n = n[9] * 9 + n[i*2];
} 

function functionBody(arr: integer[], size: integer) => void 
{
  localvar n: integer;
} 

function functionBody(arr: integer[], size: integer) => float 
{
  localvar n: integer;
  read(n);
  write(n);
  
  return (n+1.111);
} 

function functionCalls(x: integer) => integer {
  localvar i: integer; 
  i = 0; 
  printArray(x);
  printArray(x, y);
  printArray(x, y, z, a, b, c);
  printArray(0, 1.0, arr[i], a, b, c);
  printArray(0, 1.0, arr[i], a, arr[1][i], c);
  printArray(a, printArray(x, y, z));
  
  i = printArray(77);
  printArray(i+1, arr[i]);
  printArray(i+1);
  return (i);
} 

function functionParams(x: integer, y: float, z: id, a: integer[10]) => void {} 

function variableDecls(x: integer) => void {
   localvar i: integer; 
   localvar i: float; 
   localvar i: id; 
   localvar i: integer[]; 
   localvar i: integer[10]; 
   localvar i: float[]; 
   localvar i: float[10]; 
   localvar i: integer[][]; 
   localvar i: float[][]; 
   localvar i: float[2][]; 
   localvar i: integer[9][3]; 
} 

function printArray(x: float) => integer {
  localvar i: integer; 
  i = 0; 
  return (i);
} 

function printArray(x: id) => integer {
  localvar i: integer; 
  i = 0; 
  return (i);
} 

function printArray(x: id) => id {
  localvar i: integer; 
  i = 0; 
  return (i);
} 

function printArray(x: float[]) => integer {
  localvar i: integer; 
  i = 0; 
  return (i);
} 

function printArray(x: float[5]) => float {
  localvar i: integer; 
  i = 0; 
  return (i);
} 

function printArray(x: float[][]) => float {
  localvar i: integer; 
  i = 0; 
  return (i);
} 

function printArray(x: float[10][111]) => float {
  localvar i: integer; 
  i = 0; 
  return (i);
} 

function LINEAR::constructor(A: float[][], B: float) 
{

}

function LINEAR::evaluate(x: float) => float 
{
  localvar result: float;
  result = 0.0;
  result = a * x + b;
  return (result);
}