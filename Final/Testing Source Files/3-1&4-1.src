// 3.1.3 & 4.1.3
class A isa B, C {
  public attribute a: float;
  private attribute b: integer;
  public function evaluate: (x: float) => float;
};
class B {

};
class C {

};

// 3.1.2 & 4.1.2
function main() => void
{
  // 3.1.1 & 4.1.1
  localvar x: integer;
  localvar y: float;
  localvar z: A;
  localvar arr: integer[2];
  localvar arr2: float[3][4];
  localvar arr3: A[5][6][7];
  
  // 3.1.3 & 4.1.3
  A.b = 3;

  // 3.1.4 & 4.1.4
  x = 3 * 4 / y < 10 - 2 + y and 10;
  x = 1 < 2;
  x = 1 <= 2;
  x = 1 == 2;
  x = 1 <> 2;
  x = 1 >= 2;
  x = 1 > 2;
  x = not 1;
  x = 1 and 2;
  x = 1 or 2;

  // 3.1.5 & 4.1.5
  while (1 < 2) { 
    x = 2;
  };
  if (1 < 2) then else;
  if (1 < 2) then {
    x = 2;
  } else {
    x = 1;
  };
  if (1 < 2) then x = 2; else x = 1;;

  // 3.1.6 & 4.1.6
  read(x);
  write(2 + 3);
  return(x / 2 < 1);

  // 3.1.7 & 4.1.7
  f1();

  // 3.1.8 & 4.1.8
  localvar n: integer;
  n = n.n;
  n = n.n();
  n = n.n(n);
  n = n(n).n;
  n = n(n).n();
  n = n.n[n];
  n = n[n].n;
  n = n[n].n[n];
  n = n[n][n].n;
  n = n[n][n].n[n][n];
  n = n(n).n[n];
  n = n(n).n[n].n();
  n = n[n][n].n().n;

  // 3.1.9 & 4.1.9
  n = n[4 + 2][n - 2][10 / 9];
}

// 3.1.2 & 4.1.2
function A::evaluate(x: float) => float
{
  
}